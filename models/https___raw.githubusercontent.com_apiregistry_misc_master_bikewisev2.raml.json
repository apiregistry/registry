{"uses":[{"key":"commons","value":"https://raw.githubusercontent.com/apiregistry/commons/master/commons.raml"},{"key":"extras","value":"https://raw.githubusercontent.com/apiregistry/typesExtras/master/typeExtras.raml"}],"title":"BikeWise API v2","description":"<p>This is an API for accessing information about bicycling related incidents. You can find the source code on <a href=\"https://github.com/bikeindex/bikewise\">GitHub</a>.</p>\n","version":"v2","baseUri":"bikewise.org/api","protocols":["HTTP"],"mediaType":"application/json","resources":[{"relativeUri":"/v2","displayName":"/v2","resources":[{"methods":[{"queryParameters":{"page":{"name":"page","displayName":"page","typePropertyKind":"TYPE_EXPRESSION","type":["integer"],"default":1,"required":false,"description":"<p>Page of results to fetch.</p>\n","format":"int32","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"per_page":{"name":"per_page","displayName":"per_page","typePropertyKind":"TYPE_EXPRESSION","type":["integer"],"required":false,"description":"<p>Number of results to return per page.</p>\n","format":"int32","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"occurred_before":{"name":"occurred_before","displayName":"occurred_before","typePropertyKind":"TYPE_EXPRESSION","type":["integer"],"required":false,"description":"<p>End of period</p>\n","format":"int32","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"occurred_after":{"name":"occurred_after","displayName":"occurred_after","typePropertyKind":"TYPE_EXPRESSION","type":["integer"],"required":false,"description":"<p>Start of period</p>\n","format":"int32","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"incident_type":{"name":"incident_type","displayName":"incident_type","typePropertyKind":"TYPE_EXPRESSION","type":["string"],"required":false,"description":"<p>Only incidents of specific type</p>\n","enum":["crash","hazard","theft","unconfirmed","infrastructure_issue","chop_shop"],"__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"proximity":{"name":"proximity","displayName":"proximity","typePropertyKind":"TYPE_EXPRESSION","type":["string"],"required":false,"description":"<p>Center of location for proximity search</p>\n","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"proximity_square":{"name":"proximity_square","displayName":"proximity_square","typePropertyKind":"TYPE_EXPRESSION","type":["integer"],"default":100,"required":false,"description":"<p>Size of the proximity search</p>\n","format":"int32","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"query":{"name":"query","displayName":"query","typePropertyKind":"TYPE_EXPRESSION","type":["string"],"required":false,"description":"<p>Full text search of incidents</p>\n","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}}},"responses":{"200":{"code":"200","description":"No response was specified"}},"protocols":["HTTP"],"description":"\n\n<p>If youâd like more detailed information about bike incidents, use this endpoint. For mapping, <code>locations</code> is probably a better bet.</p>\n\n<p><strong>Notes on location searching</strong>: <br />\n- <code>proximity</code> accepts an ip address, an address, zipcode, city, or latitude,longitude - i.e. <code>70.210.133.87</code>, <code>210 NW 11th Ave, Portland, OR</code>, <code>60647</code>, <code>Chicago, IL</code>, and <code>45.521728,-122.67326</code> are all acceptable<br />\n- <code>proximity_square</code> sets the length of the sides of the square to find matches inside of. The square is centered on the location specified by <code>proximity</code>. It defaults to 100.</p>\n","displayName":"Paginated incidents matching parameters","method":"get","__METADATA__":{"primitiveValuesMeta":{"protocols":{"calculated":true}}}}],"relativeUri":"/incidents","displayName":"/incidents","resources":[{"methods":[{"responses":{"200":{"code":"200","description":"No response was specified"}},"protocols":["HTTP"],"method":"get","__METADATA__":{"primitiveValuesMeta":{"protocols":{"calculated":true}}}}],"uriParameters":{"id":{"name":"id","displayName":"id","typePropertyKind":"TYPE_EXPRESSION","type":["integer"],"required":true,"description":"<p>Incident ID</p>\n","format":"int32","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}}},"relativeUri":"/{id}","displayName":"/{id}","__METADATA__":{"primitiveValuesMeta":{"displayName":{"calculated":true}}},"relativeUriPathSegments":["{id}"],"absoluteUri":"bikewise.org/api/v2/incidents/{id}"}],"__METADATA__":{"primitiveValuesMeta":{"displayName":{"calculated":true}}},"relativeUriPathSegments":["incidents"],"absoluteUri":"bikewise.org/api/v2/incidents"},{"methods":[{"queryParameters":{"occurred_before":{"name":"occurred_before","displayName":"occurred_before","typePropertyKind":"TYPE_EXPRESSION","type":["integer"],"required":false,"description":"<p>End of period</p>\n","format":"int32","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"occurred_after":{"name":"occurred_after","displayName":"occurred_after","typePropertyKind":"TYPE_EXPRESSION","type":["integer"],"required":false,"description":"<p>Start of period</p>\n","format":"int32","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"incident_type":{"name":"incident_type","displayName":"incident_type","typePropertyKind":"TYPE_EXPRESSION","type":["string"],"required":false,"description":"<p>Only incidents of specific type</p>\n","enum":["crash","hazard","theft","unconfirmed","infrastructure_issue","chop_shop"],"__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"proximity":{"name":"proximity","displayName":"proximity","typePropertyKind":"TYPE_EXPRESSION","type":["string"],"required":false,"description":"<p>Center of location for proximity search</p>\n","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"proximity_square":{"name":"proximity_square","displayName":"proximity_square","typePropertyKind":"TYPE_EXPRESSION","type":["integer"],"default":100,"required":false,"description":"<p>Size of the proximity search</p>\n","format":"int32","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"query":{"name":"query","displayName":"query","typePropertyKind":"TYPE_EXPRESSION","type":["string"],"required":false,"description":"<p>Full text search of incidents</p>\n","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"limit":{"name":"limit","displayName":"limit","typePropertyKind":"TYPE_EXPRESSION","type":["integer"],"required":false,"description":"<p>Max number of results to return. Defaults to 100</p>\n","format":"int32","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"all":{"name":"all","displayName":"all","typePropertyKind":"TYPE_EXPRESSION","type":["boolean"],"required":false,"description":"<p>Give âem all to me. Will ignore limit</p>\n","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}}},"responses":{"200":{"code":"200","description":"No response was specified"}},"protocols":["HTTP"],"description":"<p><strong>This endpoint behaves exactly like</strong> <code>incidents</code>, but returns a valid geojson <code>FeatureCollection</code> that looks like this:</p>\n\n<pre><code>{\n  type: \"FeatureCollection\",\n  features: [\n    {\n      type: \"Feature\",\n      properties: {\n      id: 4474199,\n      type: \"Theft\",\n      occurred_at: 1428536937\n    },\n      geometry: {\n      type: \"Point\",\n      coordinates: [ -122.6244177, 45.5164386 ]\n    }\n  }\n}\n</code></pre>\n\n<p>It doesnât paginate. If you pass the <code>all</code> parameter it returns all matches (which can be big, &gt; 4mb), otherwise it returns the 100 most recent.</p>\n\n<p><strong>Go forth and make maps!</strong></p>\n","displayName":"Unpaginated geojson response","method":"get","__METADATA__":{"primitiveValuesMeta":{"protocols":{"calculated":true}}}}],"relativeUri":"/locations","displayName":"/locations","resources":[{"methods":[{"queryParameters":{"occurred_before":{"name":"occurred_before","displayName":"occurred_before","typePropertyKind":"TYPE_EXPRESSION","type":["integer"],"required":false,"description":"<p>End of period</p>\n","format":"int32","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"occurred_after":{"name":"occurred_after","displayName":"occurred_after","typePropertyKind":"TYPE_EXPRESSION","type":["integer"],"required":false,"description":"<p>Start of period</p>\n","format":"int32","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"incident_type":{"name":"incident_type","displayName":"incident_type","typePropertyKind":"TYPE_EXPRESSION","type":["string"],"required":false,"description":"<p>Only incidents of specific type</p>\n","enum":["crash","hazard","theft","unconfirmed","infrastructure_issue","chop_shop"],"__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"proximity":{"name":"proximity","displayName":"proximity","typePropertyKind":"TYPE_EXPRESSION","type":["string"],"required":false,"description":"<p>Center of location for proximity search</p>\n","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"proximity_square":{"name":"proximity_square","displayName":"proximity_square","typePropertyKind":"TYPE_EXPRESSION","type":["integer"],"default":100,"required":false,"description":"<p>Size of the proximity search</p>\n","format":"int32","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"query":{"name":"query","displayName":"query","typePropertyKind":"TYPE_EXPRESSION","type":["string"],"required":false,"description":"<p>Full text search of incidents</p>\n","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"limit":{"name":"limit","displayName":"limit","typePropertyKind":"TYPE_EXPRESSION","type":["integer"],"required":false,"description":"<p>Max number of results to return. Defaults to 100</p>\n","format":"int32","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}},"all":{"name":"all","displayName":"all","typePropertyKind":"TYPE_EXPRESSION","type":["boolean"],"required":false,"description":"<p>Give âem all to me. Will ignore limit</p>\n","__METADATA__":{"primitiveValuesMeta":{"required":{"insertedAsDefault":true}}}}},"responses":{"200":{"code":"200","description":"No response was specified"}},"protocols":["HTTP"],"description":"<p>This behaves exactly like the root <code>locations</code> endpoint, but returns <a href=\"https://github.com/mapbox/simplestyle-spec\">simplestyled markers</a> (<a href=\"https://www.mapbox.com/guides/markers/#simple-style\">mapbox styled markers</a>)</p>\n\n<p><strong>Go forth and make maps!</strong></p>\n","displayName":"Unpaginated geojson response with simplestyled markers","method":"get","__METADATA__":{"primitiveValuesMeta":{"protocols":{"calculated":true}}}}],"relativeUri":"/markers","displayName":"/markers","__METADATA__":{"primitiveValuesMeta":{"displayName":{"calculated":true}}},"relativeUriPathSegments":["markers"],"absoluteUri":"bikewise.org/api/v2/locations/markers"}],"__METADATA__":{"primitiveValuesMeta":{"displayName":{"calculated":true}}},"relativeUriPathSegments":["locations"],"absoluteUri":"bikewise.org/api/v2/locations"}],"__METADATA__":{"primitiveValuesMeta":{"displayName":{"calculated":true}}},"relativeUriPathSegments":["v2"],"absoluteUri":"bikewise.org/api/v2"}],"__METADATA__":{"primitiveValuesMeta":{"protocols":{"calculated":true}}}}